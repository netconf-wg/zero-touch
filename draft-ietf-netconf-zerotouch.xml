<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-zerotouch-latest">
    <front>
        <title abbrev="Zero Touch">Zero Touch Provisioning for NETCONF or RESTCONF based Management</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <author initials="M.A." surname="Abrahamsson" fullname="Mikael Abrahamsson">
            <organization>T-Systems</organization>
            <address>
                <email>mikael.abrahamsson@t-systems.se</email>
            </address>
        </author>
        <author initials="I.F." surname="Farrer" fullname="Ian Farrer">
            <organization>Deutsche Telekom AG</organization>
            <address>
                <email>ian.farrer@telekom.de</email>
            </address>
        </author>
        <date/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <keyword>zerotouch</keyword>
        <abstract>
            <t>This draft presents a secure technique for establishing a
            NETCONF or RESTCONF connection between a newly deployed
            device, configured with just its preconfigured initial state
            (e.g., factory default settings), and its deployment specific
            network management system (NMS).</t>
        </abstract>
        <note title="Editorial Note (To be removed by RFC Editor)">
          <t>This draft contains many placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  Please note that no other
          RFC Editor instructions are specified anywhere else in this document.</t>
          <t>Artwork in the IANA Considerations section contains placeholder
          values for DHCP options pending IANA assignment.  Please apply the
          following replacements:
            <list  style="symbols">
              <t><spanx style="verb">OPTION_V4_ZEROTOUCH_REDIRECT</spanx> --&gt; the option code assigned for the "DHCPv4 Zero Touch Option" option</t>
              <t><spanx style="verb">OPTION_V6_ZEROTOUCH_REDIRECT</spanx> --&gt; the option code assigned for the "DHCPv6 Zero Touch Option" option</t>
            </list>
          </t>
          <t>Artwork in this document contains shorthand references to drafts in
          progress.  Please apply the following replacements:
            <list  style="symbols">
              <t><spanx style="verb">XXXX</spanx> --&gt; the assigned RFC value for this draft</t>
              <t><spanx style="verb">YYYY</spanx> --&gt; the assigned RFC value for <xref target="I-D.ietf-netconf-keystore"/></t>
              <t><spanx style="verb">ZZZZ</spanx> --&gt; the assigned RFC value for <xref target="I-D.ietf-anima-voucher"/></t>
            </list>
          </t>
          <t>Artwork in this document contains placeholder values for the date of publication of this
          draft.  Please apply the following replacement:
            <list  style="symbols">
              <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
            </list>
          </t>
          <t>Please update the following references to reflect their final RFC assignments:
            <list style="symbols">
              <t>I-D.ietf-netconf-netconf-client-server</t>
              <t>I-D.ieft-anima-voucher</t>
            </list>
          </t>
          <t>The following one Appendix section is to be removed prior to publication:
            <list  style="symbols">
              <t>Appendix A.  Change Log</t>
            </list>
          </t>
        </note>
    </front>

    <middle>
      <section title="Introduction">

        <t>A fundamental business requirement for any network operator is
        to reduce costs where possible.  For network operators, deploying
        devices to many locations can be a significant cost, as sending
        trained specialists to each site for installations is both cost
        prohibitive and does not scale.</t>

        <t>This document defines a bootstrapping strategy enabling devices to
        securely obtain bootstrapping data with no installer action beyond
        physical placement and connecting network and power cables.  The ultimate
        goal of this document is to enable a secure NETCONF <xref target="RFC6241"/>
        or RESTCONF <xref target="RFC8040"/> connection to a deployment specific
        network management system (NMS).</t>

        <t>This document primarily regards physical devices, where the setting
        of the device's initial state, described in <xref target="initial-state"/>,
        occurs during the device's manufacturing process.  However, the zerotouch
        solution may be extensible to virtual machines or other such logical
        constructs.  Details for how this can be accomplished is left for future
        work.</t>


        <section title="Use Cases" anchor="use-cases">
          <t>
            <list style="symbols">
              <t>Device connecting to a remotely administered network
                <list style="empty">
                  <t>This use-case involves scenarios, such as a remote branch office
                  or convenience store, whereby a device connects as an access gateway
                  to an ISP's network.  Assuming it is not possible to customize the
                  ISP's network to provide any bootstrapping support, and with no other
                  nearby device to leverage, the device has no recourse but to reach
                  out to an Internet-based bootstrap server to bootstrap from.</t>
                </list>
              </t>
              <t>Device connecting to a locally administered network
                <list style="empty">
                  <t>This use-case covers all other scenarios and differs only in that
                  the device may additionally leverage nearby devices, which may direct
                  it to use a local service to bootstrap from.  If no such information
                  is available, or the device is unable to use the information provided,
                  it can then reach out to the network just as it would for the remotely
                  administered network use-case.</t>
                </list>
              </t>
            </list>
          </t>
          <t>Conceptual workflows for how zerotouch might be deployed are
          provided in <xref target="workflow-overview"/>.</t>
        </section>


        <section title="Terminology" anchor="terminology">

          <t>This document uses the following terms (sorted by name):
            <list style="hanging" hangIndent="4">

              <t hangText="Artifact:">The term "artifact" is used throughout to represent
              any of the three artifacts defined in <xref target="artifacts"/> (zero touch
              information, ownership voucher, and owner certificate).  These artifacts
              collectively provide all the bootstrapping data a device may use.</t>

              <t hangText="Bootstrapping Data:">The term "bootstrapping data" is used
              throughout this document to refer to the collection of data that a device
              may obtain during the bootstrapping process.  Specifically, it refers
              to the three artifacts zero touch information, owner certificate, and
              ownership voucher, as described in <xref target="artifacts"/>. </t>

              <t hangText="Bootstrap Server:">The term "bootstrap server" is used within
              this document to mean any RESTCONF server implementing the YANG module
              defined in <xref target="yang-module"/>.</t>

              <t hangText="Device:">The term "device" is used throughout this document
              to refer to the network element that needs to be bootstrapped.  See
              <xref target="device-details"/> for more information about devices.</t>

              <t hangText="Initial Secure Device Identifier (IDevID):">The term "IDevID"
              is defined in <xref target="Std-802.1AR-2009"/> as the globally unique
              secure device identifier (DevID) installed on the device by the manufacturer.
              This identifier is used in this document to enable a bootstrap server to
              securely identify and authenticate the device.</t>

              <t hangText="Manufacturer:">The term "manufacturer" is used herein to
              refer to the manufacturer of a device or a delegate of the manufacturer.</t>

              <t hangText="Network Management System (NMS):">The acronym "NMS" is used
              throughout this document to refer to the deployment specific management
              system that the bootstrapping process is responsible for introducing devices to.
              From a device's perspective, when the bootstrapping process has completed,
              the NMS is a NETCONF or RESTCONF client.</t>

              <t hangText="Onboarding Information:">The term "onboarding information" is used
              herein to refer to one of the two types of "zero touch information"
              defined in this document, the other being "redirect information".  Onboarding
              information is formally defined by the "onboarding-information" YANG-data
              structure in <xref target="info-yang-module"/>.</t>

              <t hangText="Onboarding Server:">The term "onboarding server" is used
              herein to refer to a bootstrap server that only returns onboarding
              information.</t>

              <t hangText="Owner:">The term "owner" is used throughout this document
              to refer to the person or organization that purchased or otherwise owns
              a device.</t>

              <t hangText="Owner Certificate:">The term "owner certificate" is used in
              this document to represent an X.509 certificate that binds an owner identity
              to a public key, which a device can use to validate a signature over the
              zero touch information artifacts.  The owner certificate is one of
              the three bootstrapping artifacts described in <xref target="artifacts"/>.</t>

              <t hangText="Ownership Voucher:">The term "ownership voucher" is used in
              this document to represent the voucher artifact defined in <xref
              target="I-D.ietf-anima-voucher"/>.  The ownership voucher is used to
              assign a device to an owner.  The ownership voucher is one of
              the three bootstrapping artifacts described in <xref target="artifacts"/>.</t>

              <t hangText="Redirect Information:">The term "redirect information" is used
              herein to refer to one of the two types of "zero touch information"
              defined in this document, the other being "onboarding information".  Redirect
              information is formally defined by the "redirect-information" YANG-data
              structure in <xref target="info-yang-module"/>.</t>

              <t hangText="Redirect Server:">The term "redirect server" is used to refer
              to a bootstrap server that only returns redirect information.  A redirect
              server is particularly useful when hosted by a manufacturer, as a
              well-known (e.g., Internet-based) resource to redirect devices to
              deployment-specific bootstrap servers.</t>

              <t hangText="Signed Data:">The term "signed data" is used throughout to mean
              either redirect information or onboarding information that has been signed,
              specifically by a private key possessed by a device's owner.</t>

              <t hangText="Unsigned Data:">The term "unsigned data" is used throughout to mean
              either redirect information or onboarding information that has not been signed.</t>

              <t hangText="Zero Touch Information:">The term "zero touch information" is used
              generally herein to refer either redirect information or onboarding information.
              Zero touch information is one of the three bootstrapping artifacts described in
              <xref target="artifacts"/>.</t>

            </list>
          </t>
        </section>

        <section title="Requirements Language" anchor="requirements-language">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
          "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
          when, and only when, they appear in all capitals, as shown here.</t>
        </section>

        <section title="Tree Diagrams">
          <t>Tree diagrams used in this document follow the notation
          defined in ^I-D.ietf-netmod-yang-tree-diagrams^.</t>
        </section>
      </section>  <!-- end Introduction -->

<!--
      <section title="Guiding Principles">
        <t>This section provides overarching principles guiding the solution presented in this document.</t>

        <section title="Trust Anchors">
          <t>A trust anchor is used in cryptography to represent an entity in which trust is implicit
          and not derived.  In PKIX (Public Key Infrastructure using X.509), a root certificate
          is a trust anchor, from which a chain of trust can be derived.  The solution presented in this
          document requires that all the entities involved (e.g., devices, bootstrap servers, NMSs)
          possess specific trust anchors in order to ensure mutual authentication throughout the
          zero touch bootstrapping process.</t>
        </section>

        <section title="Conveying Trust" anchor="conveying-trust">
          <t>A device in its factory default state possesses a finite number of manufacturer
          specified trust anchors.  In this document, there are two types of device trust
          anchors of interest, those used to verify TLS connections and those used to verify
          message signatures.  How each of these two types of trust anchors can be used to
          convey trust is discussed next.</t>
          <t>The first type of trust anchor is used to verify TLS connections, for instance,
          to a manufacturer-hosted Internet-based bootstrap server, as described in
          <xref target="bootstrap-server"/>.  In this case, trust is conveyed by the device
          first authenticating the server, using a factory default trust anchor, and then
          implicitly trusting any information provided by the server.</t>
          <t>The second type of trust anchor is used to verify signed messages, for instance,
          messages signed by a device's manufacturer, such as the ownership voucher artifact
          described in <xref target="ownership-voucher"/>.  In this case, trust is conveyed
          by the device first authenticating the signed message, using a factory default trust
          anchor, and then implicitly trusting any information provided by the message.</t>
          <t>Notably, redirect information, as described in <xref target="redirect-information"/>,
          may be communicated using either method, and it may encode additional trust anchors
          that can be used when the device connects to the bootstrap servers specified by the
          redirect information.</t>
        </section>

        <section title="Conveying Ownership">
          <t>The ultimate goal of this document is to enable a device to establish a secure
          connection with its owner's NMS.  This entails the manufacturer being able
          to track who is the owner of a device (not defined in this document), as
          well as an ability to convey that information to devices (defined in this document).</t>
          <t>Complimenting the two ways to convey trust (<xref target="conveying-trust"/>),
          ownership can be conveyed either by a connection to a trusted bootstrap server
          (<xref target="bootstrap-server"/>) or by a verified signed message.

          <t>When a device connects to a trusted bootstrap server, it can implicitly trust
          that the bootstrap server would only provide data that its owner staged
          for it to find.  That is, ownership is conveyed by an agreement, that the
          administrator of the bootstrap server (e.g., a manufacturer) would only stage
          data configured by a device's owner.</t>

          <t>When a device verifies signed bootstrapping data, it can authenticate that
          its owner provided the data by verifying the signature over the data
          using an additional artifact defined within this document, the ownership voucher.
          With this approach, ownership is conveyed by the manufacturer
          taking the onus of ensuring that the ownership vouchers it issues are accurate.</t>
        </section>
      </section>    end guiding principles -->

      <section title="Types of Bootstrapping Information" anchor="types-of-information">

        <t>This document defines two types of information that devices access during
        the bootstrapping process.  These information types are described in
        this section. Examples are provided in <xref target="zt-info-data-model-examples"/></t>

        <section title="Redirect Information" anchor="redirect-information">
          <t>Redirect information redirects a device to
          another bootstrap server.  Redirect information encodes a list of bootstrap
          servers, each defined by its hostname or IP address, an optional port,
          and an optional trust anchor certificate.</t>

          <t>Redirect information is YANG modeled data formally defined by the
          "redirect-information" container in the YANG module presented in
          <xref target="info-yang-module"/>.  This container has the tree
          diagram shown below.</t>
          <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/redirect-information-tree.txt)
]]></artwork>
          </figure></t>

          <t>Redirect information MAY be trusted or untrusted.  The redirect information
          is trusted whenever it is obtained via a secure connection to a trusted bootstrap
          server, or whenever it is signed by the device's owner.  In all other
          cases, the redirect information is untrusted.</t>

          <t>Trusted redirect information is useful for enabling a device to establish
          a secure connection to a bootstrap server, which is possible when the redirect
          information includes the bootstrap server's trust anchor certificate.   When
          a device is able to establish a secure connection to a bootstrap server, any
          data obtained is implicitly trusted, and thus does not need to be signed.</t>

          <t>Untrusted redirect information is useful for directing a device to a bootstrap
          server where signed data has been staged for it to obtain.  When the redirect
          information is untrusted, the device MUST discard any potentially included trust
          anchor certificates and SHOULD establish a provisional connection (by blindly
          accepting the TLS certificate) to any of the specified bootstrap servers.  In
          this case, the device MUST NOT trust the bootstrap server, and data provided
          by the bootstrap server MUST be signed for it to be of any use to the device.</t>

          <t>How devices process redirect information is formally described in
          <xref target="process-redirect-information"/>.</t>
        </section>

        <section title="Onboarding Information" anchor="onboarding-information">

          <t>Onboarding information provides all the data necessary for a device
          to bootstrap itself, in order to be considered ready to be managed
          (e.g., by an NMS).  As defined in this document, this data includes
          information about a boot image the device must be running, an initial
          configuration the device must commit, and optional scripts that, if
          specified, the device must successfully execute.</t>

          <t>Onboarding information is YANG modeled data formally defined by the
          "onboarding-information" container in the YANG module presented in
          <xref target="info-yang-module"/>.  This container has the tree diagram
          shown below.</t>

         <t><figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/onboarding-information-tree.txt)
]]></artwork>
          </figure></t>

          <t>Onboarding information MUST be trusted for it to be of any use to a device.
          There is no option for a device to process untrusted onboarding information.</t>

          <t>Onboarding information is trusted whenever it is obtained via a secure connection
          to a trusted bootstrap server, or whenever it is signed by the device's
          owner.  In all other cases, the onboarding information is untrusted.</t>

          <t>How devices process onboarding information is formally described in
          <xref target="process-onboarding-information"/>.</t>
        </section>

      </section>

      <section title="Artifacts" anchor="artifacts">

        <t>This document defines three artifacts that can be made available
        to devices while they are bootstrapping.  Each source of bootstrapping
        information specifies a means for providing each of the artifacts
        defined in this section (see <xref target="sources"/>).</t>

        <section title="Zero Touch Information" anchor="zerotouch-information">
          <t>The zero touch information artifact encodes the essential bootstrapping
          data for the device.  This artifact is used to encode the redirect
          information and onboarding information types discussed in <xref
          target="types-of-information"/>.</t>

          <t>The zero touch information artifact is a CMS structure, as described
          in <xref target="RFC5652"/>, encoded using ASN.1 distinguished encoding
          rules (DER), as specified in ITU-T X.690 <xref target="ITU.X690.1994"/>.
          The CMS structure MUST contain content conforming to the
          YANG module specified in <xref target="info-yang-module"/>.</t>

          <t>The zero touch information CMS structure may encode signed or 
          unsigned bootstrapping data.</t>

          <t>When the data is unsigned, as it might be when communicated over
          trusted channels, the CMS structure's top-most content type MUST be
          one of the OIDs described in <xref target="cms_cts"/> or the OID
          id_data (1.2.840.113549.1.7.1), in which case the JSON encoding
          MUST be assumed, unless communicated otherwise via external
          signals. </t>

          <t>When the data is signed, as it might be when communicated over
          untrusted channels, the CMS structure's top-most content type MUST
          be OID id-signedData (1.2.840.113549.1.7.2).</t>
        </section>

        <section title="Owner Certificate" anchor="owner-certificate">
          <t>The owner certificate artifact is an X.509 certificate
          <xref target="RFC5280"/> that is used to identify an "owner" (e.g.,
          an organization).  The owner certificate can be signed by any
          certificate authority (CA).  The owner certificate MUST either have
          no Key Usage specified, or the Key Usage MUST at least set the
          "digitalSignature" bit.  The values for the owner certificate's
          "subject" and/or "subjectAltName" are not constrained by this
          document.</t>

          <t>The owner certificate is used by a device to verify the signature over
          the zero touch information artifact (<xref target="zerotouch-information"/>)
          that the device should have also received, as described in
          <xref target="artifact-groupings"/>.  In particular, the device
          verifies the signature using the public key in the owner certificate
          over the content contained within the zero touch information artifact.</t>

          <t>The owner certificate artifact is formally a CMS structure, as
          specified by <xref target="RFC5652"/>, encoded using ASN.1
          distinguished encoding rules (DER), as specified in ITU-T X.690
          <xref target="ITU.X690.1994"/>.</t>

          <t>The owner certificate CMS structure MUST contain the owner
          certificate itself, as well as all intermediate certificates leading
          up to the 'pinned-domain-cert' certificate specified in the ownership
          voucher.  The owner certificate artifact MAY optionally include the
          'pinned-domain-cert' as well.</t>

          <t>Additionally, in order to support devices deployed on private networks,
          the owner certificate CMS structure MAY also contain suitably fresh
          CRLs <xref target="RFC5280"/> and/or OCSP Responses <xref target="RFC6960"/>.
          Having these revocation objects stapled to the owner certificate precludes
          the need for the device to have to download them dynamically using the CRL
          distribution point or an OCSP responder specified in the associated
          certificates.</t>
        </section>

        <section title="Ownership Voucher" anchor="ownership-voucher">
          <t>The ownership voucher artifact is used to securely identify a device's
          owner, as it is known to the manufacturer.  The ownership voucher is signed
          by the device's manufacturer.</t>

          <t>The ownership voucher is used to verify the owner certificate
          (<xref target="owner-certificate"/>) that the device should have also
          received, as described in <xref target="artifact-groupings"/>.  In
          particular, the device verifies that the owner certificate has a chain
          of trust leading to the trusted certificate included in the ownership
          voucher ('pinned-domain-cert'), even if it is itself (e.g., self-signed
          certificate).</t>

          <t>The ownership voucher artifact, including its encoding, is formally
          defined in <xref target="I-D.ietf-anima-voucher"/>.</t>
        </section>
        <section title="Artifact Groupings" anchor="artifact-groupings">
          <t>This section lists all the possible bootstrapping artifacts,
          but only certain groupings of these artifacts make sense to return in the
          various bootstrapping situations described in this document.  These groupings
          are:
            <list style="hanging" hangIndent="6">
                <t hangText="   Unsigned Information:">This grouping is useful for cases
                  when transport level security can be used to convey trust (e.g., HTTPS),
                  or when the information can be processed in a provisional manner (i.e.
                  unsigned redirect information).</t>
                <t hangText="   Signed Information, without revocations:">The grouping
                  is useful when signed information is needed, because it's obtained
                  from an untrusted source, and it cannot be processed provisionally,
                  and yet either revocations are not needed or they can be obtained
                  dynamically.</t>
                <t hangText="   Signed Information, with revocations:">The grouping
                  is useful when signed information is needed, because it's obtained
                  from an untrusted source, and it cannot be processed provisionally,
                  and revocations are needed and cannot be obtained dynamically.</t>
            </list>
          </t>
          <t>The artifacts associated with these groupings are described below:
            <figure>
              <artwork><![CDATA[
                        Zero Touch       Ownership       Owner
Grouping                Information      Voucher         Certificate
--------------------    -------------    ------------    -----------
Unsigned Information    Yes, no sig      No              No

Signed Information,     Yes, with sig    Yes, without    Yes, without
without revocations                      revocations     revocations

Signed Information,     Yes, with sig    Yes, with       Yes, with
with revocations                         revocations     revocations
  ]]></artwork>
            </figure>
          </t>
        </section>
      </section>

      <section title="Sources of Bootstrapping Data" anchor="sources">

        <t>This section defines some sources for bootstrapping data that a device
        can access.  The list of sources defined here is not meant to be exhaustive.
        It is left to future documents to define additional sources for obtaining
        bootstrapping data.</t>

        <t>For each source of bootstrapping data defined in this section, details
        are given for how the three artifacts listed in <xref target="artifacts"/>
        are provided.</t>

        <section title="Removable Storage" anchor="removable-storage">
          <t>A directly attached removable storage device (e.g., a USB flash drive)
          MAY be used as a source of zero touch bootstrapping data.</t>

          <t>Use of a removable storage device is compelling, as it doesn't require
          any external infrastructure to work.  It is notable that the raw boot
          image file can also be located on the removable storage device, enabling
          a removable storage device to be a fully self-standing bootstrapping
          solution.</t>

          <t>To use a removable storage device as a source of bootstrapping data,
          a device need only detect if the removable storage device is plugged in
          and mount its filesystem.</t>

          <t>A removable storage device is an untrusted source of bootstrapping data.
          This means that the information stored on the removable storage device
          MUST either be signed, or be information that can be processed
          provisionally (e.g., unsigned redirect information).</t>

          <t>From an artifact perspective, since a removable storage device presents
          itself as a filesystem, the bootstrapping artifacts need to be presented
          as files.  The three artifacts defined in <xref target="artifacts"/> are
          mapped to files below.</t>

          <t>Artifact to File Mapping:
            <list style="hanging" hangIndent="6">
              <t hangText="   Zero Touch Information:">Mapped to a file containing
              the binary artifact described in <xref target="zerotouch-information"/>
              (e.g., zerotouch-information.cms).</t>
              <t hangText="   Owner Certificate:">Mapped to a file containing the
              binary artifact described in <xref target="owner-certificate"/>
              (e.g., owner-certificate.cms).</t>
              <t hangText="   Ownership Voucher:">Mapped to a file containing the
              binary artifact described in <xref target="ownership-voucher"/>
              (e.g., ownership-voucher.cms or ownership-voucher.vcj).</t>
            </list>
          </t>
          <t>The format of the removable storage device's filesystem and the naming of the
          files are outside the scope of this document.  However, in order to facilitate
          interoperability, it is RECOMMENDED devices support open and/or standards based
          filesystems.  It is also RECOMMENDED that devices assume a file naming convention
          that enables more than one instance of bootstrapping data to exist on a removable
          storage device.  The file naming convention SHOULD be unique to the manufacturer,
          in order to enable bootstrapping data from multiple manufacturers to exist on a
          removable storage device.</t>
        </section>

        <section title="DNS Server" anchor="dns-server">
          <t>A DNS server MAY be used as a source of zero touch bootstrapping data.</t>

          <t>Using a DNS server may be a compelling option for deployments having
          existing DNS infrastructure, as it enables a touchless bootstrapping option
          that does not entail utilizing an Internet based resource hosted by a
          3rd-party.</t>

          <t>To use a DNS server as a source of bootstrapping data, a device MAY
          perform a multicast DNS <xref target="RFC6762"/> query searching for the
          service "_zerotouch._tcp.local.".  Alternatively the device MAY perform
          DNS-SD <xref target="RFC6763"/> via normal DNS operation, using the domain
          returned to it from the DHCP server; for example, searching for the service
          "_zerotouch._tcp.example.com".</t>

          <t>Unsigned DNS records (e.g., not using DNSSEC as described in <xref target="RFC6698"/>)
          are an untrusted source of bootstrapping data.  This means that the information
          stored in the DNS records either MUST be signed, or MUST be information
          that can be processed provisionally (e.g., unsigned redirect information).</t>

          <t>From an artifact perspective, since a DNS server presents resource records
          (Section 3.2.1 of <xref target="RFC1035"/>), the bootstrapping artifacts need
          to be presented as resource records.  The three artifacts defined in
          <xref target="artifacts"/> are mapped to resource records below.</t>

          <t>Artifact to Resource Record Mapping:
            <list style="hanging" hangIndent="6">
              <t hangText="   Zero Touch Information:">Mapped to a TXT record called "zt-info"
              containing the base64-encoding of the binary artifact described in
              <xref target="zerotouch-information"/>.</t>
              <t hangText="   Owner Certificate:">Mapped to a TXT record called
              "zt-cert" containing the base64-encoding of the binary artifact
              described in <xref target="owner-certificate"/>.</t>
              <t hangText="   Ownership Voucher:">Mapped to a TXT record called
              "zt-voucher" containing the base64-encoding of the binary artifact
              described in <xref target="ownership-voucher"/>.</t>
            </list>
          </t>

          <t>TXT records have an upper size limit of 65535 bytes (Section 3.2.1
          in RFC1035), since "RDLENGTH" is a 16-bit field.  Please see Section
          3.1.3 in RFC4408 for how a TXT record can achieve this size.  Due to this
          size limitation, some zero touch information artifacts may not fit.  In particular,
          onboarding information could hit this upper bound, depending
          on the size of the included configuration and scripts.</t>

          <t>When onboarding information (not redirect information) is provided,
          the URL for the boot-image the device can download would have to point
          to another server (e.g., http://, ftp://, etc.), as DNS servers do not
          themselves distribute files.</t>
        </section>

        <section title="DHCP Server" anchor="dhcp-server">
          <t>A DHCP server MAY be used as a source of zero touch bootstrapping data.</t>

          <t>Using a DHCP server may be a compelling option for deployments having
          existing DHCP infrastructure, as it enables a touchless bootstrapping option
          that does not entail utilizing an Internet based resource hosted by a
          3rd-party.</t>

          <t>A DHCP server is an untrusted source of bootstrapping data.  Thus the
          information stored on the DHCP server either MUST be signed, or it MUST
          be information that can be processed provisionally (e.g., unsigned redirect
          information).</t>

          <t>However, unlike other sources of bootstrapping data described
          in this document, the DHCP protocol (especially DHCP for IPv4) is limited
          in the amount of data that can be conveyed, to the extent that
          signed data cannot be communicated.  Thus only unsigned redirect
          information can be conveyed.</t>

          <t>Since the redirect information is unsigned, it SHOULD NOT include the
          optional trust anchor certificate, as the device would have to discard
          it anyway.  The DHCP options defined in <xref target="dhcp-options"/>
          do not enable the certificate to be communicated.</t>

          <t>From an artifact perspective, the three artifacts defined in
          <xref target="artifacts"/> are mapped to the DHCP fields specified in
          <xref target="dhcp-options"/> as follows:
            <list style="hanging" hangIndent="6">
              <t hangText="   Zero Touch Information:">This artifact is not supported
              directly.  Instead, the essence of redirect information (not onboarding
              information) is mapped to the DHCP fields described in
              <xref target="dhcp-options"/>.</t>
              <t hangText="   Owner Certificate:">Not supported.  There is not enough
              space in the DHCP packet to hold an owner certificate artifact.</t>
              <t hangText="   Ownership Voucher:">Not supported.  There is not enough
              space in the DHCP packet to hold an ownership voucher artifact.</t>
            </list>
          </t>
        </section>

        <section title="Bootstrap Server" anchor="bootstrap-server">
          <t>A bootstrap server MAY be used as a source of zero touch bootstrapping data.
          A bootstrap server is defined as a RESTCONF <xref target="RFC8040"/>
          server implementing the YANG module provided in <xref target="api"/>.</t>

          <t>Using a bootstrap server as a source of bootstrapping data is a compelling
          option as it MAY use transport-level security, in lieu of signed data, which
          may be easier to deploy in some situations.  Additionally, the bootstrap server
          is able to receive progress updates from devices, which may be critical to
          some deployments (e.g., the passing of the device's SSH host keys).</t>

          <t>A bootstrap server may be a trusted or an untrusted source of bootstrapping
          data, depending on if the device learned about the bootstrap server's trust
          anchor from a trusted source.  When a bootstrap server is trusted, the
          information returned from it MAY be signed.  However, when the server is
          untrusted, in order for its information to be of any use to the device, the
          bootstrap information MUST either be signed or be information that can be
          processed provisionally (e.g., unsigned redirect information).</t>

          <t>From an artifact perspective, since a bootstrap server presents data as
          a YANG-modeled data, the bootstrapping artifacts need to be mapped to
          the YANG module.  The three artifacts defined in <xref target="artifacts"/>
          are mapped to 'output' node of the 'get-bootstrapping-data' RPC defined
          in <xref target="yang-module"/> below.</t>

          <t>Artifact to Bootstrap Server Mapping:
            <list style="hanging" hangIndent="6">
              <t hangText="   Zero Touch Information:">Mapped to the 'zerotouch-information'
              leaf in the output of the 'get-bootstrapping-data' RPC.</t>
              <t hangText="   Owner Certificate:">Mapped to the 'owner-certificate'
              leaf in the output of the 'get-bootstrapping-data' RPC.</t>
              <t hangText="   Ownership Voucher:">Mapped to the 'ownership-voucher'
              leaf in the output of the 'get-bootstrapping-data' RPC.</t>
            </list>
          </t>

          <t>Unlike any other source of bootstrapping data described in this document, a
          bootstrap server is not only a source of data, but it can also receive data
          from devices using the YANG-defined 'report-progress' RPC defined
          in the YANG module (<xref target="yang-module"/>).  The 'report-progress' RPC
          enables visibility into the bootstrapping process (e.g., warnings and
          errors), and provides potentially useful completion status information
          (e.g., the device's SSH host-keys).</t>

          <t>While RESTCONF servers typically support a nested hierarchy of
          resources, zero touch bootstrap servers only have the two RPCs
          'get-bootstrapping-data' and 'report-progress'.  These RPCs use
          the authenticated RESTCONF username to isolate the execution of
          the RPC from other devices.</t>

        </section>  <!-- end bootstrap server -->

      </section>




      <section title="Device Details" anchor="device-details">

          <t>Devices supporting the bootstrapping strategy described in this
          document MUST have the preconfigured state and bootstrapping logic
          described in the following sections.  The "ietf-zerotouch-device"
          YANG module in <xref target="device-model"/> defines a data model
          to access this information.</t>

          <section title="Initial State" anchor="initial-state">
            <figure>
                <artwork><![CDATA[
+-------------------------------------------------------------+
|                           <device>                          |
|                                                             |
| +---------------------------------------------------------+ |
| |                   <read/write storage>                  | |
| |                                                         | |
| | 1. flag to enable zerotouch bootstrapping set to "true" | |
| +---------------------------------------------------------+ |
|                                                             |
| +---------------------------------------------------------+ |
| |                   <read-only storage>                   | |
| |                                                         | |
| | 2. IDevID cert & associated intermediate certificate(s) | |
| | 3. list of trusted well-known bootstrap servers         | |
| | 4. list of trust anchor certs for bootstrap servers     | |
| | 5. trust anchor cert for verifying ownership vouchers   | |
| +---------------------------------------------------------+ |
|                                                             |
|                  +----------------------+                   |
|                  |   <secure storage>   |                   |
|                  |                      |                   |
|                  |  6. private key      |                   |
|                  +----------------------+                   |
|                                                             |
+-------------------------------------------------------------+
]]></artwork>
            </figure>
            <t>Each numbered item below corresponds to a numbered item in the diagram above.
            <list style="numbers">

              <t>Devices MUST have a configurable variable that is used to enable/disable
              the zerotouch bootstrapping.  This variable MUST be enabled by default in
              order for zerotouch bootstrapping to run when the device first powers on.
              Because it is a goal that the configuration installed by the bootstrapping
              process is able to disable zerotouch bootstrapping, and because said
              configuration may be merged into the existing configuration, using a
              configuration node that relies on presence is NOT RECOMMENDED, as it
              cannot be removed by the merging process.</t>

              <t>Devices that support loading bootstrapping data from bootstrap
              servers (see <xref target="bootstrap-server"/>), whether preconfigured
              or learned through the bootstrapping process, MUST possess an initial
              device identifier (IDevID), as defined in <xref target="Std-802.1AR-2009"/>.
              The IDevID is an X.509 certificate encoding, amongst other things, the
              device's serial number and hardware manufacturer.  The device MUST also
              possess any intermediate certificates between the IDevID certificate and
              the manufacturer's IDevID trust anchor certificate provided to prospective
              owners separately (e.g., <xref target="onboarding-and-ordering"/>).</t>

              <t>Devices that support loading bootstrapping data from well-known
              bootstrap servers MUST possess a list of the well-known bootstrap servers.
              Consistent with redirect information (<xref target="redirect-information"/>,
              each bootstrap server MAY be identified by its hostname or IP address, and
              an optional port.</t>

              <t>Devices that support loading bootstrapping data from well-known
              bootstrap servers MUST also possess a list of trust anchor certificates
              that can be used to secure the TLS connection to the well-known bootstrap
              servers.</t>

              <t>Devices that support loading signed data (see <xref target="terminology"/>)
              MUST possess the manufacturer's trust anchor certificate for validating
              ownership vouchers.</t>

              <t>Devices MUST possess a private key that corresponds to the public key
              encoded in the device's IDevID certificate.  This private key SHOULD be
              securely stored, ideally in a cryptographic processor (e.g., a TPM).</t>
            </list>
          </t>
          <t>A YANG module representing this data is provided in
          <xref target="device-model"/>.</t>

        </section>

        <section title="Boot Sequence" anchor="boot-sequence">
          <t>A device claiming to support the bootstrapping strategy defined in this
          document MUST support the boot sequence described in this section.</t>
          <t>
            <figure>
              <artwork><![CDATA[
    Power On
        |
        v                                No
 1. Zerotouch bootstrapping configured ------> Boot normally
        |
        | Yes
        v
 2. For each supported source of bootstrapping data,
    try to load bootstrapping data from the source
        |
        |
        v                               Yes
 3. Able to bootstrap from any source? -----> Run with new config
        |
        | No
        v
 4. Loop and/or wait for manual provisioning.

]]></artwork>
            </figure>
          </t>

          <t>Each numbered item below corresponds to a numbered item in the diagram above.
            <list style="numbers">
              <t>When the device powers on, it first checks to see if zerotouch bootstrapping
              is configured, as is expected to be the case for the device's preconfigured
              state.   If zerotouch bootstrapping is not configured, then the device
              boots normally.</t>
              <t>The device iterates over its list of sources for
              bootstrapping data (<xref target="sources"/>).  Details for
              how to processes a source of bootstrapping data are provided
              in <xref target="processing-a-source"/>.</t>
              <t>If the device is able to bootstrap itself from any of
              the sources of bootstrapping data, it runs with the new
              bootstrapped configuration.</t>
              <t>Otherwise the device MAY loop back through the list of
              bootstrapping sources again and/or wait for manual provisioning.</t>
            </list>
          </t>
        </section>  <!-- end boot sequence -->

        <section title="Processing a Source of Bootstrapping Data" anchor="processing-a-source">
          <t>This section describes a recursive algorithm that devices can use to,
          ultimately, obtain onboarding information.  The algorithm is recursive
          because sources of bootstrapping data may return redirect information,
          which causes the algorithm to run again, for the newly discovered sources
          of bootstrapping information.  An expression that captures all possible
          successful sequences of bootstrapping information is zero or more redirect
          information responses, followed by one onboarding information response.</t>

          <t>An important aspect of the algorithm is knowing when data needs to be
          signed or not.  The following figure provides a summary of options:
          <figure>
            <artwork><![CDATA[
                                 Untrusted Source  Trusted Source
    Kind of Bootstrapping Data     Can Provide?     Can Provide?

    Unsigned Redirect Info     :       Yes+             Yes
    Signed Redirect Info       :       Yes              Yes*
    Unsigned Onboarding Info   :        No              Yes
    Signed Onboarding Info     :       Yes              Yes*

    The '+' above denotes that the source redirected to MUST
    return signed data, or more unsigned redirect information.

    The '*' above denotes that, while possible, it is generally
    unnecessary for a trusted source to return signed data.
]]></artwork>
          </figure></t>

          <t>The recursive algorithm uses a conceptual global-scoped variable
          called "trust-state".  The trust-state variable is initialized to FALSE.
          The ultimate goal of this algorithm is for the device to process
          onboarding information (<xref target="onboarding-information"/>)
          while the trust-state variable is TRUE.</t>

          <t>If the source of bootstrapping data (<xref target="sources"/>) is a
          bootstrap server (<xref target="bootstrap-server"/>), and the device is
          able to authenticate the bootstrap server using X.509 certificate path
          validation (<xref target="RFC6125"/>, Section 6) to one of the device's
          preconfigured trust anchors, or to a trust anchor that it learned
          from a previous step, then the device MUST set trust-state to TRUE.
          When establishing a connection to a bootstrap server, regardless the
          device's ability to verify the bootstrap server's certificate, the
          device MUST identify itself to the bootstrap server using its 
          IDevID certificate (i.e., TLS-level client certificate based
          authentication). It is neccesary for the device to identify itself
          to enable the bootstrap server to return signed data, which must
          include an ownership voucher for the specific device.</t>

          <t>For any source of bootstrapping data (e.g., <xref target="sources"/>),
          if the bootstrapping data returned is signed and the device is able
          to validate the signed data using the algorithm described in
          <xref target="validating-signed-data"/>, then the device MUST set
          trust-state to TRUE, else the device MUST set trust-state to FALSE.
          Note, this is worded to cover the special case when signed data is
          returned even from a trusted bootstrap server.</t>

          <t>If the bootstrapping data is onboarding information, and
          trust-state is FALSE, the device MUST exit the recursive algorithm (as
          this is not allowed, see the figure above), returning to the state machine
          described in <xref target="boot-sequence"/>.  Otherwise, the device MUST
          attempt to process the onboarding information as described in
          <xref target="process-onboarding-information"/>.  In either case, success
          or failure, the device MUST exit the recursive algorithm, returning to
          the state machine described in <xref target="boot-sequence"/>, the only
          difference being in how it responds to the "Able to bootstrap from any
          source?" conditional described in the figure in the section.</t>

          <t>If the bootstrapping data is redirect information, the device MUST process the redirect
          information as described in <xref target="process-redirect-information"/>.
          This is the recursion step, it will cause the device to reenter this algorithm,
          but this time the data source will definitely be a bootstrap server, as
          that is all redirect information is able to redirect a device to.</t>
        </section>

        <section title="Validating Signed Data" anchor="validating-signed-data">
          <t>Whenever a device is presented signed data, it MUST validate the
          signed data as described in this section.  This includes the case
          where the signed data is provided by a trusted source.</t>
          <t>Whenever there is signed data, the device MUST also be provided
          an ownership voucher and an owner certificate.  How all the needed
          artifacts are provided for each source of bootstrapping data is
          defined in <xref target="sources"/>.</t>
          <t>The device MUST first authenticate the ownership voucher
          by validating its signature to one of its preconfigured
          trust anchors (see <xref target="initial-state"/>), which
          may entail using additional intermediate certificates attached
          to the ownership voucher.  If the device has an accurate clock,
          it MUST verify that the ownership voucher was created in the past
          (i.e., 'created-on' &lt; now).  If the 'expires-on' leaf is present, the
          device MUST verify that the ownership voucher has not yet expired
          (i.e., now &lt; 'expires-on'), which requires an accurate clock.  The
          device MUST verify that the ownership voucher's 'assertion' value is
          acceptable (e.g., some devices may only accept the assertion value
          'verified').  The device MUST verify that the ownership voucher specifies
          the device's serial number in the 'serial-number' leaf.  If the
          'idevid-issuer' leaf is present, the device MUST verify that the
          value is set correctly.  If the authentication of the ownership voucher
          is successful, the device extracts the 'pinned-domain-certificate' node,
          an X.509 certificate, that is needed to verify the owner certificate in
          the next step.</t>
          <t>The device MUST next authenticate the owner certificate by performing
          X.509 certificate path verification to the trusted certificate extracted
          from the ownership voucher's 'pinned-domain-cert' node.  This verification
          may entail using additional intermediate certificates attached to the
          owner certificate artifact.  If the ownership voucher's
          'domain-cert-revocation-checks' node's value is set to "true", the device
          MUST verify the revocation status of the certificate chain used to sign
          the owner certificate and, if the revocation status is not attainable or
          if it is determined that a certificate has been revoked, the device
          MUST not validate the owner certificate.</t>
          <t>Finally the device MUST verify the signature over the information
          artifact was generated by the private key matching the public
          key from the owner certificate.</t>
          <t>If any of these steps fail, then the device MUST invalidate the data
          and not perform any subsequent steps.</t>
        </section>  <!-- end validating signed data -->

        <section title="Processing Redirect Information" anchor="process-redirect-information">
          <t>In order to process redirect information (<xref target="redirect-information"/>),
          the device MUST follow the steps presented in this section.</t>

          <t>Processing redirect information is straightforward.  The device sequentially
          steps through the list of provided bootstrap servers until it can find one it
          can bootstrap from.</t>

          <t>If a hostname is provided, and the hostname's DNS resolution is to more
          than one IP address, the device MUST attempt to connect to all of the DNS
          resolved addresses at least once, before moving on to the next bootstrap
          server.  If the device is able to obtain bootstrapping data from any of the
          DNS resolved addresses, it MUST immediately process that data, without
          attempting to connect to any of the other DNS resolved addresses.</t>

          <t>If the redirect information is trusted (e.g., trust-state is TRUE), and the
          bootstrap server entry contains a trust anchor certificate, then the device MUST
          authenticate the specified bootstrap server RESTCONF TLS server certificate
          using X.509 certificate path validation (<xref target="RFC6125"/>, Section 6)
          to the specified trust anchor.  If the device is unable to authenticate the
          bootstrap server to the specified trust anchor, the device MAY attempt
          a provisional connection to the bootstrap server (i.e., by blindly accepting
          its server certificate) and setting trust-state to FALSE.</t>

          <t>If the redirect information is untrusted (e.g., trust-state is FALSE), the
          device MUST discard any trust anchors provided by the redirect information and
          establish a provisional connection to the bootstrap server (i.e., by blindly
          accepting its TLS server certificate).</t>
        </section>

        <section title="Processing Onboarding Information" anchor="process-onboarding-information">
          <t>In order to process onboarding information (<xref target="onboarding-information"/>),
          the device MUST follow the steps presented in this section.</t>

          <t>When processing onboarding information, the device MUST first process the boot image
          information, then execute the pre-configuration script (if any), then commit the initial
          configuration, and then execute the post-configuration script (if any), in that order.
          If the device encounters an error at any step, it MUST NOT proceed to the next step.
          When the onboarding information was obtained from a trusted bootstrap server, the
          device SHOULD send progress reports throughout the bootstrapping process using the
          bootstrap server's 'report-progress' RPC.</t>

          <t>First the device MUST determine if the image it is running satisfies the specified
          boot image  criteria (e.g., name and/or fingerprint match).  If it does not, the device
          MUST download (using the supplied URI), verify, and install the specified boot image,
          and then reboot.  To verify the downloaded boot image, the device MUST check that the
          boot image file matches the fingerprint (e.g., sha256) supplied by the onboarding
          information.  Upon rebooting, the bootstrapping process runs again, which
          will eventually come to this very point, but this time the device's running
          image will satisfy the specified criteria, and thus the device will move
          to processing the next step.</t>

          <t>Next, for devices that support executing scripts, if a pre-configuration
          script has been specified, the device MUST execute the script and check its
          exit status code to determine if had any warnings or errors.  In the case of
          errors, the device MUST reset itself in such a way that wipes out any bad
          state the script may have left behind.</t>

          <t>Next the device commits the provided initial configuration. Assuming no errors,
          the device moves to processing the next step.</t>

          <t>Again, for devices that support executing scripts, if a post-configuration script
          has been specified, the device MUST execute the script and check its exit status
          code to determine if it had any warnings or errors.  In the case of errors,
          the device MUST reset itself in such a way that wipes out any bad state the
          script may have left behind.</t>

          <t>At this point, the device has completely processed the bootstrapping
          data and is ready to be managed.  If the device obtained the onboarding
          information from a trusted bootstrap server, the device MUST post the
          'bootstrap-complete' progress report now, using the bootstrap server's
          'report-progress' RPC.</t>

          <t>At this point, the device is running its initial configuration.  Notably,
          if NETCONF Call Home or RESTCONF Call Home <xref target="RFC8071"/> is
          configured, the device initiates trying to establish a call home connection
          at this time.</t>

        </section>
      </section>  <!-- end device details -->

      <section title="The Zero Touch Information Data Model" anchor="zt-info-data-model">
        <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module that is used to
        define the data model for the zero touch information artifact described in
        <xref target="zerotouch-information"/>.  This data model uses the 'yang-data'
        extension statement defined in RFC 8040.  Examples illustrating this data model
        are provided in <xref target="zt-info-data-model-examples"/>.</t>

        <section title="Data Model Overview">
          <t>The following tree diagram provides an overview of the data model for the
          zero touch information artifact.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-zerotouch-information-tree.txt)
]]></artwork>
          </figure>
        </section>

        <section title="Example Usage" anchor="zt-info-data-model-examples">

          <t>The following example illustrates how redirect information
          (<xref target="redirect-information"/>) can be encoded using JSON.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-file-redirect-information.json)
]]></artwork>
          </figure>

          <t>The following example illustrates how onboarding information
          (<xref target="onboarding-information"/>) can be encoded using JSON.</t>

          <t>Note: the sample configuration used in the below example configures an
          administrator account with an SSH public key, configures keystore with an
          authentication certificate, configures NETCONF Call Home and, lastly,
          disables the zerotouch bootstrapping service.  This is acheived through use
          of YANG modules "ietf-system" from <xref target="RFC7317"/>, "ietf-keystore"
          from <xref target="I-D.ietf-netconf-keystore"/>, "ietf-netconf-server" from
          <xref target="I-D.ietf-netconf-netconf-client-server"/> and
          "ietf-zerotouch-device" from this document.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-file-onboarding-information.json,68)
]]></artwork>
          </figure>
        </section>

        <section title="YANG Module" anchor="info-yang-module">
          <t>The zero touch information data model is defined
          by the YANG module presented in this section.</t>

          <t>Note: the module defined herein uses data types defined
          in <xref target="RFC5280"/>, <xref target="RFC6234"/>, and
          <xref target="RFC6991"/>, and an extension statement from
          <xref target="RFC8040"/>, and an encoding defined in
          <xref target="ITU.X690.1994"/>.</t>

          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-zerotouch-information@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(ietf-zerotouch-information@YYYY-MM-DD.yang)
<CODE ENDS>
]]></artwork>
          </figure>
        </section>

      </section>

      <section title="The Zero Touch Bootstrap Server API" anchor="api">

        <t>This section defines the API for bootstrap servers.  The API is
        defined as the API produced by a RESTCONF <xref target="RFC8040"/>
        server that supports the YANG 1.1 <xref target="RFC7950"/> module
        defined in this section.</t>

        <section title="API Overview">
          <t>The following tree diagram provides an overview for the bootstrap server
          RESTCONF API.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-zerotouch-bootstrap-server-tree.txt)
]]></artwork>
          </figure>
        </section>

        <section title="Example Usage" anchor="api-examples">

          <t>This section presents three examples illustrating the bootstrap server's
          API.  Two examples are provided for the 'get-bootstrapping-data' RPC (once
          to an untrusted bootstrap server, and again to a trusted bootstrap server),
          and one example for the 'report-progress' RPC.</t>

          <t>The following example illustrates a device using the API to fetch its
          bootstrapping data from a untrusted bootstrap server.  In this example, the
          device sends the 'untrusted-connection' input parameter and receives signed
          data in the response.</t>
          <figure>
            <artwork><![CDATA[
REQUEST
-------
['\' line wrapping added for formatting only]

POST /restconf/operations/ietf-zerotouch-bootstrap-server:get-boot\
strapping-data HTTP/1.1
HOST: example.com
Content-Type: application/yang.data+xml

INSERT_TEXT_FROM_FILE(refs/get-bootstrap-data-rpc-untrusted.xml)

RESPONSE
--------

HTTP/1.1 200 OK
Date: Sat, 31 Oct 2015 17:02:40 GMT
Server: example-server
Content-Type: application/yang.data+xml

INSERT_TEXT_FROM_FILE(refs/get-bootstrap-data-rpc-reply-untrusted.xml)
]]></artwork>
          </figure>

          <t>The following example illustrates a device using the API to fetch its
          bootstrapping data from a trusted bootstrap server.  In this example, the
          device sends addition input parameters that the bootstrap server can use
          when formulating its response to the device.</t>
          <figure>
            <artwork><![CDATA[
REQUEST
-------
['\' line wrapping added for formatting only]

POST /restconf/operations/ietf-zerotouch-bootstrap-server:get-boot\
strapping-data HTTP/1.1
HOST: example.com
Content-Type: application/yang.data+xml

INSERT_TEXT_FROM_FILE(refs/get-bootstrap-data-rpc-trusted.xml)

RESPONSE
--------

HTTP/1.1 200 OK
Date: Sat, 31 Oct 2015 17:02:40 GMT
Server: example-server
Content-Type: application/yang.data+xml

INSERT_TEXT_FROM_FILE(refs/get-bootstrap-data-rpc-reply-trusted.xml)
]]></artwork>
          </figure>
          <t>The following example illustrates a device using the API to post
          a progress update to a bootstrap server.  Illustrated below is
          the 'bootstrap-complete' message, but the device may send other
          progress reports to the server while bootstrapping.  In this
          example, the device is sending both its SSH host keys and a TLS
          server certificate, which the bootstrap server may, for example,
          pass to an NMS, as discussed in <xref target="device-powers-on"/>.</t>

          <figure>
            <artwork><![CDATA[
REQUEST
-------
['\' line wrapping added for formatting only]

POST /restconf/operations/ietf-zerotouch-bootstrap-server:report-\
progress HTTP/1.1
HOST: example.com
Content-Type: application/yang.data+xml

INSERT_TEXT_FROM_FILE(refs/ex-api-bootstrap-complete-update.xml)

RESPONSE
--------

HTTP/1.1 204 No Content
Date: Sat, 31 Oct 2015 17:02:40 GMT
Server: example-server
]]></artwork>
          </figure>
        </section>  <!-- Example Usage -->

        <section title="YANG Module" anchor="yang-module">
          <t>The bootstrap server's device-facing API is normatively defined
          by the YANG module defined in this section.</t>

          <t>Note: the module defined herein uses data types
          defined in <xref target="RFC5652"/>, <xref target="RFC5280"/>,
          <xref target="RFC6960"/>, and <xref target="I-D.ietf-anima-voucher"/>,
          and uses an encoding defined in <xref target="ITU.X690.1994"/>.</t>
          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-zerotouch-bootstrap-server@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(ietf-zerotouch-bootstrap-server@YYYY-MM-DD.yang)
<CODE ENDS>
]]></artwork>
          </figure>
        </section> <!-- YANG Module -->

      </section>




      <section title="The Zero Touch Device Data Model" anchor="device-model">

        <t>This section defines a data model that devices can implement
        to enable the configuration of zerotouch bootstrapping and
        discovery of what parameters are used by its bootstrapping logic.</t>

        <section title="Data Model Overview">
          <t>The following tree diagram provides an overview for the zerotouch
          device data model.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-zerotouch-device-tree.txt)
]]></artwork>
          </figure>
          <t>In the above diagram, notice that there is only one configurable node
          'enabled'.  The expectation is that this node would be set to 'true' in
          device's factory default configuration and that it would either be set
          to 'false' or deleted when the zerotouch bootstrapping is longer needed.</t>
        </section>

        <section title="Example Usage" anchor="device-example">
          <t>Following is an instance example for this data model.</t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-api-device-model.xml,68)
]]></artwork>
          </figure>
        </section>  <!-- Example Usage -->

        <section title="YANG Module" anchor="device-yang-module">
          <t>The device model is normatively defined by the YANG module
          defined in this section.</t>

          <t>Note: the module defined herein uses data types
          defined in <xref target="RFC5652"/> and <xref target="RFC6991"/>,
          and uses an encoding defined in <xref target="ITU.X690.1994"/>.</t>
          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-zerotouch-device@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(ietf-zerotouch-device@YYYY-MM-DD.yang)
<CODE ENDS>
]]></artwork>
          </figure>
        </section> <!-- YANG Module -->

      </section>

      <section title="DHCP Zero Touch Options" anchor="dhcp-options">

        <t>This section defines two DHCP options, one for DHCPv4 and one for
        DHCPv6.  These two options are semantically the same, though syntactically
        different.</t>

        <section title="DHCPv4 Zero Touch Option">

          <t>The DHCPv4 Zero Touch Option is used to provision the client
          with one or more URIs for bootstrap servers that can be
          contacted to attempt further configuration.</t>

          <figure>
            <artwork><![CDATA[
   DHCPv4 Zero Touch Redirect Option

    0                             1
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   |   option-code (TBD)   |     option-length     |
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
   .                                               .
   .    bootstrap-server-list (variable length)    .
   .                                               .
   +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

   o option-code: OPTION_V4_ZEROTOUCH_REDIRECT (TBD)
   o option-length: The option length in octets
   o bootstrap-server-list: A list of servers for the
      client to attempt contacting, in order to obtain
      further bootstrapping data, in the format shown
      in [common-field-encoding].
]]></artwork>
          </figure>

          <t>DHCPv4 Client Behavior</t>
          <t>Clients MAY request the OPTION_V4_ZEROTOUCH_REDIRECT by including its
          option code in the Parameter Request List (55) in DHCP request messages.</t>
          <t>On receipt of a DHCPv4 Reply message which contains the
          OPTION_V4_ZEROTOUCH_REDIRECT, the client performs the following steps:
            <list style="numbers">
              <t>Check the contents of the DHCPv4 message for at least one valid
              URI. If there is more than one valid URI in the list, a candidate
              list of possible URIs is created.</t>
              <t>Attempt to connect to the one of the URIs in the candidate list.
              The order in which these are processed by the client is implementation
              specific and not defined here.</t>
              <t>If a successful connection to the zerotouch bootstrap server,
              then the client stops processing entries in the list and proceeds
              according to <xref target="device-powers-on"/>, step(3).</t>
              <t>If the zerotouch bootstrap server does not respond, provides
              an invalid response, or the transaction otherwise fails, the client
              SHOULD attempt to contact another server from the candidate list.</t>
            </list>
          </t>
          <t>Any invalid URI entries received in the uri-data field are ignored by
            the client.  If OPTION_V4_ZEROTOUCH_REDIRECT does not contain at least one
            valid URI entry in the uri-data field, then the client MUST discard the
            option.
          </t>

          <t>As the list of URIs may exceed the maximum allowed length of
            a single DHCPv4 option (255 octets), the client MUST implement
            <xref target="RFC3396"/>, allowing the URI list to be split
            across a number of OPTION_V4_ZEROTOUCH_REDIRECT option
            instances.
          </t>

          <t>DHCPv4 Server Behavior</t>
          <t>The DHCPv4 server MAY include a single instance of Option
            OPTION_V4_ZEROTOUCH_REDIRECT in DHCP messages it sends.  Servers MUST
            NOT send more than one instance of the OPTION_V4_ZEROTOUCH_REDIRECT option.
          </t>

          <t>As the list of URIs may exceed the maximum allowed length of
            a single DHCPv4 option (255 octets), the server MUST implement
            <xref target="RFC3396"/>, allowing the URI list to be split
            across a number of OPTION_V4_ZEROTOUCH_REDIRECT option
            instances.
          </t>

        </section>

        <section title="DHCPv6 Zero Touch Option">

          <t>The DHCPv6 Zero Touch Option is used to provision the client with
          one or more URIs for bootstrap servers that can be contacted to
          attempt further configuration.</t>
          <figure>
            <artwork><![CDATA[
   DHCPv6 Zero Touch Redirect Option

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       option-code (TBD)      |          option-length         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   .           bootstrap-server-list (variable length)             .
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   o option-code: OPTION_V6_ZEROTOUCH_REDIRECT (TBD)
   o option-length: The option length in octets
   o bootstrap-server-list: A list of servers for the client to
     attempt contacting, in order to obtain further bootstrapping
     data, in the format shown in [common-field-encoding].
]]></artwork>
          </figure>

          <t>DHCPv6 Client Behavior</t>
          <t>Clients MAY request the OPTION_V6_ZEROTOUCH_REDIRECT option, as defined
          in <xref target="RFC3315"/>, Sections 17.1.1, 18.1.1, 18.1.3, 18.1.4,
          18.1.5, and 22.7.   As a convenience to the reader, we mention here that
          the client includes requested option codes in the Option Request Option.</t>
          <t>On receipt of a DHCPv6 reply message which contains the
          OPTION_V6_ZEROTOUCH_REDIRECT, the client performs the following steps:
            <list style="numbers">
              <t>Check the contents of the DHCPv6 message for at least one valid
              URI.  If there is more than one valid URI in the list, a candidate
              list of possible URIs is created.</t>
              <t>Attempt to connect to the one of the URIs in the candidate list.
              The order in which these are processed by the client is implementation
              specific and not defined here.</t>
              <t>If a successful connection to the zerotouch bootstrap server,
              then the client stops processing entries in the list and proceeds
              according to <xref target="device-powers-on"/>, step(3).</t>
              <t>If the zerotouch bootstrap server does not respond, provides
              and invalid response or the transaction otherwise fails, the client
              SHOULD attempt to contact another server from the candidate list.</t>
            </list>
          </t>
          <t>Any invalid URI entries received in the uri-data field are ignored
          by the client.  If OPTION_V6_ZEROTOUCH_REDIRECT does not contain at least
          one valid URI entry in the uri-data field, then the client MUST discard
          the option.</t>

          <t>DHCPv6 Server Behavior</t>
          <t>Sections 17.2.2 and 18.2 of <xref target="RFC3315"/> govern server
          operation in regard to option assignment.  As a convenience to the
          reader, we mention here that the server will send a particular option
          code only if configured with specific values for that option code and
          if the client requested it.</t>
          <t>Option OPTION_V6_ZEROTOUCH_REDIRECT is a singleton.  Servers MUST
          NOT send more than one instance of the OPTION_V6_ZEROTOUCH_REDIRECT
          option.</t>

        </section> <!-- DHCPv6 -->

        <section title="Common Field Encoding" anchor="common-field-encoding">
          <t>Both of the DHCPv4 and DHCPv6 options defined in this section
          encode a list of bootstrap server URIs.  The "URI" structure is
          an option that can contain multiple URIs (see <xref target="RFC7227"/>,
          Section 5.7).</t>

          <figure>
            <artwork><![CDATA[
  bootstrap-server-list:

  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+
  |       uri-length              |          URI                  |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-...-+-+-+-+-+-+-+

  o uri-length: variable, in octets.

  o URI: URI of zerotouch bootstrap server, using the HTTPS URI
    scheme defined in Section 2.7.2 of RFC7230.  URI MUST be in
    form "https://<ip-address-or-hostname>[:<port>]".
]]></artwork>
          </figure>

        </section> <!-- common -->

      </section> <!-- DHCP -->


      <section title="Security Considerations" anchor="sec-con">

        <section title="Immutable storage for trust anchors">
          <t>Devices MUST ensure that all their trust anchor
          certificates, including those for connecting to bootstrap
          servers and verifying ownership vouchers, are protected from
          external modification.</t>
          <t>It may be necessary to update these
          certificates over time (e.g., the manufacturer wants to
          delegate trust to a new CA).  It is therefore expected
          that devices MAY update these trust anchors when
          needed through a verifiable process, such as a
          software upgrade using signed software images.</t>
        </section>
        <section title="Clock Sensitivity">
          <t>The solution in this document relies on TLS certificates,
          owner certificates, and ownership vouchers, all of which
          require an accurate clock in order to be processed
          correctly (e.g., to test validity dates and revocation
          status).  Implementations SHOULD ensure devices have an
          accurate clock when shipped from manufacturing facilities,
          and take steps to prevent clock tampering.</t>
          <t>If it is not possible to ensure clock accuracy, it is
          RECOMMENDED that implementations disable the aspects of the
          solution having clock sensitivity. In particular, such
          implementations should assume that TLS certificates,
          ownership vouchers, and owner certificates never expire
          and are not revokable.  From an ownership voucher
          perspective, manufacturers SHOULD issue a single
          ownership voucher for the lifetime of such devices.</t>
          <t>Implementations SHOULD NOT rely on NTP for time, as
          NTP is not a secure protocol.</t>
        </section>
        <section title="Blindly authenticating a bootstrap server">
          <t>This document allows a device to blindly authenticate a
          bootstrap server's TLS certificate.  It does so to allow
          for cases where the redirect information may be obtained
          in an unsecured manner, which is desirable to support
          in some cases.</t>
          <t>To compensate for this, this document requires that
          devices, when connected to an untrusted bootstrap server,
          assert that data downloaded from the server is signed.</t>
        </section>
        <section title="Entropy loss over time">
          <t>Section 7.2.7.2 of the IEEE Std 802.1AR-2009 standard says
          that IDevID certificate should never expire (i.e. having the
          notAfter value 99991231235959Z).  Given the long-lived
          nature of these certificates, it is paramount to use a
          strong key length (e.g., 512-bit ECC).</t>
        </section>
        <section title="Disclosing Information to Untrusted Servers">
          <t>This document enables devices to establish provisional
          connections to bootstrap servers, in order for the bootstrap
          server to provide either unsigned redirect information or
          signed data to the device.  However, since the server is
          untrusted, it may be under the control of an adversary, and
          therefore devices should be cautious about the data they send
          in such cases.</t>
          <t>This document requires devices send their IDevID
          certificate to untrusted bootstrap servers, which means that
          the device's serial number and hardware manufacturer may
          be disclosed to an adversary.  Serial numbers are ubiquitous
          and prominently contained in invoices and on labels affixed
          to devices and their packaging.  That said, serial numbers
          many times encode revealing information, such as the device's
          model number, manufacture date, and/or manufacturing sequence
          number.  Knowledge of this information may provide an adversary
          with details needed to launch an attack.</t>
          <t>In addition to the IDevID certificate, there are other
          potentially identifying values that may be disclosed to an
          untrusted server, including 'os-name', 'os-version', 'remote-id',
          'circuit-id', and progress reports.  In order to address this
          issue, it is RECOMMENDED that implementations promote
          the untrusted connection to a trusted connection, as described in
          <xref target="untrust2trust"/>.</t>
       </section>
        <section title="Sequencing Sources of Bootstrapping Data">
          <t>For devices supporting more than one source for bootstrapping
          data, no particular sequencing order has to be observed for
          security reasons, as the solution for each source is considered
          equally secure.  However, from a privacy perspective, it is
          RECOMMENDED that devices access local sources before accessing
          remote sources.</t>
        </section>
        <section title="The &quot;ietf-zerotouch-information&quot; YANG Module">
          <t>The ietf-zerotouch-information module defined in this document
          defines a data structure that is always wrapped by a CMS structure.
          When accessed by a secure mechanism (e.g., protected by TLS), then the
          CMS structure may be unsigned.  However, when accessed by an insecure
          mechanism (e.g., removable storage device), then the CMS structure
          must be signed, in order for the device to trust it.</t>
          <t>Implementations should be aware that signed bootstrapping data
          only protects the data from modification, the contents are still
          visible to others.  This doesn't affect Security so much as Privacy.
          That the contents may be read by unintended parties when accessed by
          insecure mechanisms is considered next.</t>
          <t>The ietf-zerotouch-information module defines a top-level 'choice'
          statement that declares the contents are either "redirect-information"
          or "onboarding-information".  Each of these two cases are now considered.</t>
          <t>When the contents of the CMS structure are redirect-information,
          an observer can learn about the bootstrap servers the device is being
          directed, their IP addresses or hostnames, ports, and trust anchor
          certificates.  Knowledge of this information could provide an observer
          some insight into a network's inner structure.</t>
          <t>When the contents of the CMS structure are onboarding-information,
          as observer could learn considerable information about how the device
          is to be provisioned.  This information includes the specific operating
          system version, the initial configuration, and the specific scripts that
          the device is to run.  All of this information should be considered
          highly sensitive and precautions should be taken to protect it from
          falling into the wrong hands.</t>
        </section>
        <section title="The &quot;ietf-zerotouch-bootstrap-server&quot; YANG Module">
          <t>The ietf-zerotouch-bootstrap-server module defined in this document
          is specifies an API for a RESTCONF <xref target="RFC8040"/>.  The lowest
          RESTCONF layer is HTTPS, and the mandatory-to-implement secure transport
          is TLS <xref target="RFC5246"/>.</t>
          <t>The NETCONF Access Control Model (NACM) <xref target="RFC6536"/>
          provides the means to restrict access for particular users
          to a preconfigured subset of all available protocol operations
          and content.</t>
          <t>This module presents no data nodes (only RPCs).  There is no need
          to discuss the sensitivity of data nodes.</t>
          <t>This module defines two RPC operations that may be considered
          sensitive in some network environments.  These are the operations
          and their sensitivity/vulnerability:
            <list style="hanging" hangIndent="4">
              <t hangText="get-bootstrapping-data:">This RPC is used by devices
              to obtain their bootstrapping data.  By design, each device, as
              identified by its IDevID certificate, can only obtain its own data.
              NACM is not needed to further constrain access to this RPC.</t>
              <t hangText="report-bootstrapping-progress:">This RPC is used by devices
              to report their bootstrapping progress.  By design, each device, as
              identified by its IDevID certificate, can only report data for itself.
              NACM is not needed to further constrain access to this RPC.</t>
            </list>
          </t>
        </section>
        <section title="The &quot;ietf-zerotouch-device&quot; YANG Module">
          <t>The ietf-zerotouch-device module defined in this document is
          designed to be accessed via network management protocols such as
          NETCONF <xref target="RFC6241"/> or RESTCONF <xref target="RFC8040"/>.
          The lowest NETCONF layer is the secure transport layer, and
          the mandatory-to-implement secure transport is Secure Shell
          (SSH) <xref target="RFC6242"/>. The lowest RESTCONF layer is
          HTTPS, and the mandatory-to-implement secure transport is
          TLS <xref target="RFC5246"/>.</t>
          <t>The NETCONF access control model <xref target="RFC6536"/>
          provides the means to restrict access for particular NETCONF
          or RESTCONF users to a preconfigured subset of all available
          NETCONF or RESTCONF protocol operations and content.</t>
          <t>There is a data node defined in this YANG module
          that is writable/creatable/deletable (i.e., config true,
          which is the default). This data node may be considered
          sensitive or vulnerable in some network environments. Write
          operations (e.g., edit-config) to this data node without
          proper protection can have a negative effect on network
          operations. This is the data node and its sensitivity/vulnerability:
            <list style="hanging" hangIndent="4">
              <t hangText="/enabled:">This data node is used to enable/disable
              the zerotouch bootstrapping mechanism on a device.  NACM rules
              or equivalent should be used to restrict write-access to this
              node to authenticated clients.</t>
            </list>
          </t>
        </section>
      </section>  <!-- end Security Considerations -->

      <section title="IANA Considerations" anchor="iana-considerations">
        <section title="The IETF XML Registry">
          <t>This document registers three URIs in the IETF XML
          registry <xref target="RFC3688"/>.  Following the format in
          <xref target="RFC3688"/>, the following registrations are
          requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
URI: urn:ietf:params:xml:ns:yang:ietf-zerotouch-information
Registrant Contact: The NETCONF WG of the IETF.
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-zerotouch-bootstrap-server
Registrant Contact: The NETCONF WG of the IETF.
XML: N/A, the requested URI is an XML namespace.

URI: urn:ietf:params:xml:ns:yang:ietf-zerotouch-device
Registrant Contact: The NETCONF WG of the IETF.
XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="The YANG Module Names Registry">
          <t>This document registers three YANG modules in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format defined in <xref target="RFC6020"/>, the
          the following registrations are requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
name:      ietf-zerotouch-information
namespace: urn:ietf:params:xml:ns:yang:ietf-zerotouch-information
prefix:    zti
reference: RFC XXXX

name:      ietf-zerotouch-bootstrap-server
namespace: urn:ietf:params:xml:ns:yang:ietf-zerotouch-bootstrap-\
           server  (note: '\' used for formatting reasons only)
prefix:    ztbs
reference: RFC XXXX

name:      ietf-zerotouch-device
namespace: urn:ietf:params:xml:ns:yang:ietf-zerotouch-device
prefix:    ztd
reference: RFC XXXX
]]></artwork>
          </figure>
        </t>
        </section>
        <section title="The SMI Security for S/MIME CMS Content Type Registry" anchor="cms_cts">
          <t>IANA is kindly requested to two entries in the "SMI Security for
          S/MIME CMS Content Type" registry (1.2.840.113549.1.9.16.1), with
          values as follows:</t>
          <t>
            <figure>
                <artwork><![CDATA[

             Decimal  Description                             References
             -------  --------------------------------------  ----------
             TBD1      id-ct-zerotouchInformationXML          [ThisRFC]
             TBD2      id-ct-zerotouchInformationJSON         [ThisRFC]
]]></artwork>
          </figure>
        </t>
        </section>
        <section title="The BOOTP Manufacturer Extensions and DHCP Options Registry">
          <t>IANA is kindly requested to allocate a new option code from the
          "BOOTP Manufacturer Extensions and DHCP Options" registry
          maintained at http://www.iana.org/assignments/bootp-dhcp-parameters:
            <figure>
              <artwork>
TBD for OPTION_V4_ZEROTOUCH_REDIRECT
              </artwork>
            </figure>
          </t>
          <t>And a new option code from the "Dynamic Host Configuration Protocol
          for IPv6 (DHCPv6)" registry maintained at
          http://www.iana.org/assignments/dhcpv6-parameters:
            <figure>
              <artwork>
TBD for OPTION_V6_ZEROTOUCH_REDIRECT
              </artwork>
            </figure>
          </t>
        </section>
      </section>

      <section title="Acknowledgements">
        <t>The authors would like to thank for following for
        lively discussions on list and in the halls (ordered
        by last name):
        David Harrington,
        Michael Behringer,
        Dean Bogdanovic,
        Martin Bjorklund,
        Joe Clarke,
        Toerless Eckert,
        Stephen Farrell,
        Stephen Hanna,
        Wes Hardaker,
        Radek Krejci,
        Russ Mundy,
        Reinaldo Penno,
        Randy Presuhn,
        Max Pritikin,
        Michael Richardson,
        Phil Shafer,
        Juergen Schoenwaelder.</t>

        <t>Special thanks goes to Steve Hanna, Russ Mundy, and
        Wes Hardaker for brainstorming the original I-D's solution
        during the IETF 87 meeting in Berlin.</t>
      </section>
    </middle>

    <back>
        <references title="Normative References">
          <?rfc include="reference.RFC.1035.xml"?>
          <?rfc include="reference.RFC.2119.xml"?>
          <?rfc include="reference.RFC.5652.xml"?>
          <?rfc include="reference.RFC.3315.xml"?>
          <?rfc include="reference.RFC.3396.xml"?>
          <?rfc include="reference.RFC.5280.xml"?>
          <?rfc include="reference.RFC.6020.xml"?>
          <?rfc include="reference.RFC.6125.xml"?>
          <?rfc include="reference.RFC.6234.xml"?>
          <?rfc include="reference.RFC.6762.xml"?>
          <?rfc include="reference.RFC.6763.xml"?>
          <?rfc include="reference.RFC.6991.xml"?>
          <?rfc include="reference.RFC.7227.xml"?>
          <?rfc include="reference.RFC.7950.xml"?>
          <?rfc include="reference.RFC.8040.xml"?>
          <?rfc include="reference.RFC.8174.xml"?>
          <?rfc include="reference.I-D.ietf-anima-voucher"?>

          <?rfc include="_reference.ITU.X690.1994.xml"?>

          <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
            <front>
              <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
              <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                 <organization>IEEE SA-Standards Board</organization>
              </author>
              <date month="December" year="2009"/>
            </front>
          </reference>
        </references>

        <references title="Informative References">
          <?rfc include="reference.RFC.3688.xml"?>
          <?rfc include="reference.RFC.5246.xml"?>
          <?rfc include="reference.RFC.6241.xml"?>
          <?rfc include="reference.RFC.6242.xml"?>
          <?rfc include="reference.RFC.6536.xml"?>
          <?rfc include="reference.RFC.6960.xml"?>
          <?rfc include="reference.RFC.6698.xml"?>
          <?rfc include="reference.RFC.7317.xml"?>
          <?rfc include="reference.RFC.8071.xml"?>
          <?rfc include="reference.I-D.ietf-netmod-yang-tree-diagrams"?>
          <?rfc include="reference.I-D.ietf-netconf-netconf-client-server"?>
          <?rfc include="reference.I-D.ietf-netconf-keystore"?>
        </references>


        <section title="Workflow Overview" anchor="workflow-overview">

          <t>The zero touch solution presented in this document is conceptualized
          to be composed of the non-normative workflows described in this section.
          Implementation details are expected to vary.  Each diagram is followed
          by a detailed description of the steps presented in the diagram, with
          further explanation on how implementations may vary.</t>

          <section title="Enrollment and Ordering Devices" anchor="onboarding-and-ordering">
            <t>The following diagram illustrates key interactions that may occur from when a
            prospective owner enrolls in a manufacturer's zero touch program to when the
            manufacturer ships devices for an order placed by the prospective owner.</t>
            <t>
              <figure>
                <artwork><![CDATA[
                               +-----------+
+------------+                 |Prospective|                    +---+
|Manufacturer|                 |   Owner   |                    |NMS|
+------------+                 +-----------+                    +---+
      |                              |                            |
      |                              |                            |
      |  1. initiate enrollment      |                            |
      #<-----------------------------|                            |
      #                              |                            |
      #                              |                            |
      #     IDevID trust anchor      |                            |
      #----------------------------->#  set IDevID trust anchor   |
      #                              #--------------------------->|
      #                              |                            |
      #     bootstrap server         |                            |
      #     account credentials      |                            |
      #----------------------------->#  set credentials           |
      |                              #--------------------------->|
      |                              |                            |
      |                              |                            |
      |  2. set owner certificate trust anchor                    |
      |<----------------------------------------------------------|
      |                              |                            |
      |                              |                            |
      |  3. place device order       |                            |
      |<-----------------------------#  model devices             |
      |                              #--------------------------->|
      |                              |                            |
      |  4. ship devices and send    |                            |
      |     device identifiers and   |                            |
      |     ownership vouchers       |                            |
      |----------------------------->#  set device identifiers    |
      |                              #  and ownership vouchers    |
      |                              #--------------------------->|
      |                              |                            |
  ]]></artwork>
              </figure>
            </t>
            <t>Each numbered item below corresponds to a numbered item
            in the diagram above.
              <list style="numbers">
                <t>A prospective owner of a manufacturer's devices initiates an
                enrollment process with the manufacturer.  This process includes
                the following:
                <list style="symbols">
                  <t>Regardless how the prospective owner intends to bootstrap their devices,
                  they will always obtain from the manufacturer the trust anchor
                  certificate for the IDevID certificates.  This certificate will
                  is installed on the prospective owner's NMS so that the NMS can
                  authenticate the IDevID certificates when they're presented to
                  subsequent steps.</t>
                  <t>If the manufacturer hosts an Internet based bootstrap server (e.g., a
                  redirect server) such as described in <xref target="bootstrap-server"/>,
                  then credentials necessary to configure the bootstrap server would be
                  provided to the prospective owner.  If the bootstrap server is
                  configurable through an API (outside the scope of this document), then
                  the credentials might be installed on the prospective owner's NMS so
                  that the NMS can subsequently configure the manufacturer-hosted
                  bootstrap server directly.</t>
                </list></t>
                <t>If the manufacturer's devices are able to validate signed data
                (<xref target="validating-signed-data"/>), and assuming that the
                prospective owner's NMS is able to prepare and sign the bootstrapping
                data itself, the prospective owner's NMS might set a trust anchor
                certificate onto the manufacturer's bootstrap server, using the
                credentials provided in the previous step.  This certificate is the
                trust anchor certificate that the prospective owner would like the
                manufacturer to place into the ownership vouchers it generates, thereby
                enabling devices to trust the owner's owner certificate.  How this trust
                anchor certificate is used to enable devices to validate signed bootstrapping
                data is described in <xref target="validating-signed-data"/>.</t>
                <t>Some time later, the prospective owner places an order
                with the manufacturer, perhaps with a special
                flag checked for zero touch handling.  At this time, or
                perhaps before placing the order, the owner may model
                the devices in their NMS, creating virtual objects for the
                devices with no real-world device associations.  For instance
                the model can be used to simulate the device's location in the
                network and the configuration it should have when fully
                operational.</t>
                <t>When the manufacturer fulfills the order, shipping
                the devices to their intended locations, they may notify the owner
                of the devices's serial numbers and shipping destinations, which
                the owner may use to stage the network for when the devices power
                on.  Additionally,  the manufacturer may send one or more ownership
                vouchers, cryptographically assigning ownership of those devices to
                the owner.  The owner may set this information on their NMS, perhaps
                binding specific modeled devices to the serial numbers and ownership
                vouchers.</t>
              </list>
            </t>
          </section>


          <section title="Owner Stages the Network for Bootstrap">
            <t>The following diagram illustrates how an owner might stage the
            network for bootstrapping devices.</t>
            <t>
              <figure>
                <artwork><![CDATA[
             +----------+ +------------+
             |Deployment| |Manufacturer| +------+ +------+
             | Specific | |   Hosted   | | Local| | Local| +---------+
       +---+ |Bootstrap | | Bootstrap  | |  DNS | | DHCP | |Removable|
       |NMS| |  Server  | |   Server   | |Server| |Server| | Storage |
       +---+ +----------+ +------------+ +------+ +------+ +---------+
         |        |             |            |        |         |
1.       |        |             |            |        |         |
activate |        |             |            |        |         |
modeled  |        |             |            |        |         |
device   |        |             |            |        |         |
-------->|        |             |            |        |         |
         | 2. (optional)        |            |        |         |
         |    configure         |            |        |         |
         |    bootstrap         |            |        |         |
         |    server            |            |        |         |
         |------->|             |            |        |         |
         |        |             |            |        |         |
         | 3. (optional) configure           |        |         |
         |    bootstrap server  |            |        |         |
         |--------------------->|            |        |         |
         |        |             |            |        |         |
         |        |             |            |        |         |
         | 4. (optional) configure DNS server|        |         |
         |---------------------------------->|        |         |
         |        |             |            |        |         |
         |        |             |            |        |         |
         | 5. (optional) configure DHCP server        |         |
         |------------------------------------------->|         |
         |        |             |            |        |         |
         |        |             |            |        |         |
         | 6. (optional) store bootstrapping artifacts on media |
         |----------------------------------------------------->|
         |        |             |            |        |         |
         |        |             |            |        |         |
  ]]></artwork>
              </figure>
            </t>

            <t>Each numbered item below corresponds to a numbered item
            in the diagram above.
              <list style="numbers">
                <t>Having previously modeled the devices, including setting their
                fully operational configurations and associating device serial
                numbers and (optionally) ownership vouchers, the owner might "activate" one or
                more modeled devices.  That is, the owner tells the NMS to perform
                the steps necessary to prepare for when the real-world devices
                power up and initiate the bootstrapping process.  Note that,
                in some deployments, this step might be combined with the last step
                from the previous workflow.  Here it is depicted that an NMS performs
                the steps, but they may be performed manually or through some other
                mechanism.</t>
                <t>If it is desired to use a deployment specific bootstrap server,
                it must be configured to provide the bootstrapping information for
                the specific devices.   Configuring the bootstrap server may occur
                via a programmatic API not defined by this document.  Illustrated
                here as an external component, the bootstrap server may be
                implemented as an internal component of the NMS itself.</t>
                <t>If it is desired to use a manufacturer hosted bootstrap
                server, it must be configured to provide the bootstrapping information
                for the specific devices.  The configuration must be either redirect or
                onboarding information.  That is, either the manufacturer hosted bootstrap
                server will redirect the device to another bootstrap server, or provide
                the device with the onboarding information itself.  The types of
                bootstrapping information the manufacturer hosted bootstrap server
                supports may vary by implementation; some implementations may only
                support redirect information, or only support onboarding information,
                or support both redirect and onboarding information.  Configuring the
                bootstrap server may occur via a programmatic API not defined by this
                document.</t>
                <t>If it is desired to use a DNS server to supply bootstrapping
                information, a DNS server needs to be configured.  If multicast
                DNS-SD is desired, then the server must reside on the local network,
                otherwise the DNS server may reside on a remote network.  Please see
                <xref target="dns-server"/> for more information about how to
                configure DNS servers.  Configuring the DNS server may occur via
                a programmatic API not defined by this document.</t>
                <t>If it is desired to use a DHCP server to supply bootstrapping
                data, a DHCP server needs to be configured.  The DHCP server may
                be accessed directly or via a DHCP relay.  Please see
                <xref target="dhcp-server"/> for more information about how to
                configure DHCP servers.  Configuring the DHCP server may occur
                via a programmatic API not defined by this document.</t>
                <t>If it is desired to use a removable storage device (e.g., USB flash
                drive) to supply bootstrapping information, the information would need
                to be placed onto it.  Please see <xref target="removable-storage"/>
                for more information about how to configure a removable storage device.</t>
              </list>
            </t>
          </section>

          <section title="Device Powers On" anchor="device-powers-on">
            <t>The following diagram illustrates the sequence of activities
            that occur when a device powers on.
              <figure>
                <artwork><![CDATA[
                                                   +----------+
                                    +-----------+  |Deployment|
                                    | Source of |  | Specific |
+------+                            | Bootstrap |  |Bootstrap |  +---+
|Device|                            |   Data    |  |  Server  |  |NMS|
+------+                            +-----------+  +----------+  +---+
   |                                      |              |         |
   |                                      |              |         |
   | 1. if zerotouch bootstrap service    |              |         |
   |    is not enabled, then exit.        |              |         |
   |                                      |              |         |
   | 2. for each source supported, check  |              |         |
   |    for bootstrapping data.           |              |         |
   |------------------------------------->|              |         |
   |                                      |              |         |
   | 3. if onboarding information found,  |              |         |
   |    initialize self and, only if      |              |         |
   |    source is a bootstrap server,     |              |         |
   |    send progress updates.            |              |         |
   |------------------------------------->#              |         |
   |                                      # webhook      |         |
   |                                      #----------------------->|
   |                                                     |         |
   | 4. else if redirect-information found, for each     |         |
   |    bootstrap server specified, check for data.      |         |
   |-+-------------------------------------------------->|         |
   | |                                                   |         |
   | |  if more redirect-information is found, recurse   |         |
   | |  (not depicted), else if onboarding-information   |         |
   | |  found, initialize self and post progress reports |         |
   | +-------------------------------------------------->#         |
   |                                                     # webhook |
   |                                                     #-------->|
   |
   | 5. retry sources and/or wait for manual provisioning.
   |
  ]]></artwork>
              </figure>
            </t>
            <t>The interactions in the above diagram are described below.
              <list style="numbers">
                <t>Upon power being applied, the device checks to see if zerotouch
                bootstrapping is configured, such as must be the case when running its
                "factory default" configuration.  If zerotouch bootstrapping is
                not configured, then the bootstrapping logic exits and none of the
                following interactions occur.</t>
                <t>For each source of bootstrapping data the device supports, preferably
                in order of closeness to the device (e.g., removable storage before
                Internet based servers), the device checks to see if there is any
                bootstrapping data for it there.</t>
                <t>If onboarding information is found, the device initializes
                itself accordingly (e.g., installing a boot-image and committing an
                initial configuration).  If the source is a bootstrap server, and the
                bootstrap server can be trusted (i.e., TLS-level authentication), the
                device also sends progress reports to the bootstrap server.
                  <list style="symbols">
                    <t>The contents of the initial configuration should configure
                    an administrator account on the device (e.g., username, ssh-rsa
                    key, etc.), and should configure the device either to listen for
                    NETCONF or RESTCONF connections or to initiate call home connections
                    <xref target="RFC8071"/>, and should disable the zerotouch
                    bootstrapping service.</t>
                    <t>If the bootstrap server supports forwarding device progress updates
                    to external systems (e.g., via a webhook), a "bootstrap-complete"
                    progress report (<xref target="yang-module"/>) informs the external
                    system to know when it can, for instance, initiate a connection to
                    the device.  To support this scenario further, the 'bootstrap-complete'
                    progress update may also relay the device's SSH host keys and/or TLS
                    certificates, with which the external system can use to authenticate
                    subsequent connections to the device.  IDevID certificates do not
                    need to be sent as they do not need to be pinned by an NMS in order
                    for the NMS to trust the IDevID certificate.</t>
                  </list>
                If the device successfully completes the bootstrapping process,
                it exits the bootstrapping logic without considering any additional
                sources of bootstrapping data.
                </t>

                <t>Otherwise, if redirect information is found, the device iterates
                through the list of specified bootstrap servers, checking to see if
                it has bootstrapping data for the device.  If the bootstrap server
                returns more redirect information, then the device processes it recursively.
                Otherwise, if the bootstrap server returns onboarding information,
                the device processes it following the description provided in (3) above.</t>

                <t>After having tried all supported sources of bootstrapping data, the
                device may retry again all the sources and/or provide manageability
                interfaces for manual configuration (e.g., CLI, HTTP, NETCONF, etc.).
                If manual configuration is allowed, and such configuration is provided,
                the configuration should also disable the zerotouch bootstrapping service,
                as the need for bootstrapping would no longer be present.</t>
              </list>
            </t>
          </section>
        </section>
        <section title="Promoting a Connection from Untrusted to Trusted" anchor="untrust2trust">
          <t>The following diagram illustrates a sequence of
          bootstrapping activities that promote an untrusted
          connection to a bootstrap server to a trusted connection
          to the same bootstrap server.  This enables a device
          to limit the amount of information it might disclose
          to an adversary hosting an untrusted bootstrap server.</t>
          <t><figure>
            <artwork><![CDATA[
                                                      +----------+
                                                      |Deployment|
                                                      | Specific |
+------+                                              |Bootstrap |
|Device|                                              |  Server  |
+------+                                              +----------+
   |                                                        |
   | 1. "HTTPS" Request ('untrusted-connection')            |
   |------------------------------------------------------->|
   | 2. "HTTPS" Response (signed redirect information)      |
   |<-------------------------------------------------------|
   |                                                        |
   |                                                        |
   | 3. HTTPS Request (os-name=xyz, os-version=123, etc.)   |
   |------------------------------------------------------->|
   | 4. HTTPS Response (unsigned onboarding information     |
   |<-------------------------------------------------------|
   |                                                        |
]]></artwork>
          </figure></t>
          <t>The interactions in the above diagram are described below.</t>
          <t><list style="numbers">
            <t>The device initiates an untrusted connection to a bootstrap
            server, as is indicated by putting "HTTPS" in double quotes
            above.  It is still an HTTPS connection, but the device is
            unable to authenticate the bootstrap server's TLS certificate.
            Because the device is unable to trust the bootstrap server,
            it purposely only sends the 'untrusted-connection' input
            parameter to the 'get-bootstrapping-data' RPC, informing the
            bootstrap server that it doesn't trust it and may be holding
            back some information from the server (e.g., other input
            parameters, progress reports, etc.).</t>
            <t>The bootstrap server, seeing the 'untrusted-connection'
            input parameters, knows that it can either send unsigned
            redirect information or signed data of any type.  But, in
            this case, the bootstrap server has the ability to sign
            data and chooses to respond with signed redirect information,
            not signed onboarding information as might be expected,
            securely redirecting the device back to it again.</t>
            <t>Upon validating the signed redirect information, the
            device establishes a secure connection to the bootstrap
            server.  Unbeknownst to the device, it is the same bootstrap
            server it was connected to previously but, because the device
            is able to authenticate the bootstrap server tis time, it sends its
            normal 'get-bootstrapping-data' request (i.e., with additional
            input parameters) as well as its progress reports (not depicted).</t>
            <t>This time, because the 'untrusted-connection' parameter was
            not passed, having access to all of the device's input parameters,
            the bootstrap server returns unsigned onboarding information
            to the device.</t>
          </list></t>
        </section>
        <section title="Change Log">
          <section title="ID to 00">
            <t>
            <list style="symbols">
              <t>Major structural update; the essence is the same.
              Most every section was rewritten to some degree.</t>
              <t>Added a Use Cases section</t>
              <t>Added diagrams for "Actors and Roles" and
              "NMS Precondition" sections, and greatly improved
              the "Device Boot Sequence" diagram</t>
              <t>Removed support for physical presence or any
              ability for configlets to not be signed.</t>
              <t>Defined the Zero Touch Information DHCP option</t>
              <t>Added an ability for devices to also download
              images from configuration servers</t>
              <t>Added an ability for configlets to be encrypted</t>
              <t>Now configuration servers only have to support
              HTTP/S - no other schemes possible</t>
            </list>
            </t>
          </section>
          <section title="00 to 01">
            <t>
            <list style="symbols">
              <t>Added boot-image and validate-owner annotations
                 to the "Actors and Roles" diagram.</t>
              <t>Fixed 2nd paragraph in section 7.1 to reflect
                 current use of anyxml.</t>
              <t>Added encrypted and signed-encrypted examples</t>
              <t>Replaced YANG module with XSD schema</t>
              <t>Added IANA request for the Zero Touch Information DHCP Option</t>
              <t>Added IANA request for media types for boot-image and configuration</t>
            </list>
            </t>
          </section>
          <section title="01 to 02">
            <t>
            <list style="symbols">
              <t>Replaced the need for a configuration signer with the
              ability for each NMS to be able to sign its own configurations,
              using manufacturer signed ownership vouchers and owner certificates.</t>
              <t>Renamed configuration server to bootstrap server, a more
              representative name given the information devices download from it.</t>
              <t>Replaced the concept of a configlet by defining a southbound
              interface for the bootstrap server using YANG.</t>
              <t>Removed the IANA request for the boot-image and configuration
              media types</t>
            </list>
            </t>
          </section>
          <section title="02 to 03">
            <t>
            <list style="symbols">
              <t>Minor update, mostly just to add an Editor's Note to show how this
              draft might integrate with the draft-pritikin-anima-bootstrapping-keyinfra.</t>
            </list>
            </t>
          </section>
          <section title="03 to 04">
            <t>
            <list style="symbols">
              <t>Major update formally introducing unsigned data and support for
              Internet-based redirect servers.</t>
              <t>Added many terms to Terminology section.</t>
              <t>Added all new "Guiding Principles" section.</t>
              <t>Added all new "Sources for Bootstrapping Data" section.</t>
              <t>Rewrote the "Interactions" section and renamed it "Workflow Overview".</t>
            </list>
            </t>
          </section>
          <section title="04 to 05">
            <t>
            <list style="symbols">
              <t>Semi-major update, refactoring the document into more logical parts</t>
              <t>Created new section for information types</t>
              <t>Added support for DNS servers</t>
              <t>Now allows provisional TLS connections</t>
              <t>Bootstrapping data now supports scripts</t>
              <t>Device Details section overhauled</t>
              <t>Security Considerations expanded</t>
              <t>Filled in enumerations for notification types</t>
             </list>
            </t>
          </section>
          <section title="05 to 06">
            <t>
            <list style="symbols">
              <t>Minor update</t>
              <t>Added many Normative and Informative references.</t>
              <t>Added new section Other Considerations.</t>
            </list>
            </t>
          </section>
          <section title="06 to 07">
            <t>
            <list style="symbols">
              <t>Minor update</t>
              <t>Added an Editorial Note section for RFC Editor.</t>
              <t>Updated the IANA Considerations section.</t>
            </list>
            </t>
          </section>
          <section title="07 to 08">
            <t>
            <list style="symbols">
              <t>Minor update</t>
              <t>Updated to reflect review from Michael Richardson.</t>
            </list>
            </t>
          </section>
          <section title="08 to 09">
            <t>
            <list style="symbols">
              <t>Added in missing "Signature" artifact example.</t>
              <t>Added recommendation for manufacturers to use interoperable
              formats and file naming conventions for removable storage devices.</t>
              <t>Added configuration-handling leaf to guide if config should be
              merged, replaced, or processed like an edit-config/yang-patch document.</t>
              <t>Added a pre-configuration script, in addition to the
              post-configuration script from -05 (issue #15).</t>
            </list>
            </t>
          </section>
          <section title="09 to 10">
            <t>
            <list style="symbols">
              <t>Factored ownership voucher and voucher revocation to a
              separate document: draft-kwatsen-netconf-voucher. (issue #11)</t>
              <t>Removed &lt;configuration-handling&gt; options 'edit-config' and
              'yang-patch'. (issue #12)</t>
              <t>Defined how a signature over signed-data returned from a
              bootstrap server is processed. (issue #13)</t>
              <t>Added recommendation for removable storage devices to use
              open/standard file systems when possible.  (issue #14)</t>
              <t>Replaced notifications "script-[warning/error]" with
              "[pre/post]-script-[warning/error]". (goes with issue #15)</t>
              <t>switched owner-certificate to be encoded using the PKCS #7
              format. (issue #16)</t>
              <t>Replaced md5/sha1 with sha256 inside a choice statement, for
              future extensibility. (issue #17)</t>
              <t>A ton of editorial changes, as I went thru the entire draft
              with a fine-toothed comb.</t>
            </list>
            </t>
          </section>
          <section title="10 to 11">
            <t>
            <list style="symbols">
              <t>fixed yang validation issues found by IETFYANGPageCompilation.
              note: these issues were NOT found by pyang --ietf or by the
              submission-time validator...</t>
              <t>fixed a typo in the yang module, someone the config false statement
              was removed.</t>
            </list>
            </t>
          </section>
          <section title="11 to 12">
            <t>
            <list style="symbols">
              <t>fixed typo that prevented Appendix B from loading the
              examples correctly.</t>
              <t>fixed more yang validation issues found by
              IETFYANGPageCompilation.  note: again, these issues were
              NOT found by pyang --ietf or by the submission-time
              validator...</t>
              <t>updated a few of the notification enumerations to be
              more consistent with the other enumerations (following the
              warning/error pattern).</t>
              <t>updated the information-type artifact to state how it's
              encoded, matching the language that was in Appendix B.</t>
            </list>
            </t>
          </section>
          <section title="12 to 13">
            <t>
            <list style="symbols">
              <t>defined a standalone artifact to encode the old information-type
              into a PKCS #7 structure.</t>
              <t>standalone information artifact hardcodes JSON encoding (to
              match the voucher draft).</t>
              <t>combined the information and signature PKCS #7 structures into a
              single PKCS #7 structure.</t>
              <t>moved the certificate-revocations into the owner-certificate's
              PKCS #7 structure.</t>
              <t>eliminated support for voucher-revocations, to reflect the
              voucher-draft's switch from revocations to renewals.</t>
            </list>
            </t>
          </section>
          <section title="13 to 14">
            <t>
            <list style="symbols">
              <t>Renamed "bootstrap information" to "onboarding information".</t>
              <t>Rewrote DHCP sections to address the packet-size limitation
              issue, as discussed in Chicago.</t>
              <t>Added Ian as an author for his text-contributions to the
              DHCP sections.</t>
              <t>Removed the Guiding Principles section.</t>
            </list>
            </t>
          </section>
          <section title="14 to 15">
            <t>
            <list style="symbols">
              <t>Renamed action 'notification' to 'update-progress' and, likewise
              'notification-type' to 'update-type'.</t>
              <t>Updated examples to use "base64encodedvalue==" for binary values.</t>
              <t>Greatly simplified the "Artifact Groupings" section, and
                 moved it as a subsection to the "Artifacts" section.</t>
              <t>Moved the "Workflow Overview" section to the Appendix.</t>
              <t>Renamed "bootstrap information" to "update information".</t>
              <t>Removed "Other Considerations" section.</t>
              <t>Tons of editorial updates.</t>
            </list>
            </t>
          </section>
          <section title="15 to 16">
            <t>
              <list style="symbols">
                <t>tweaked language to refer to "initial state" rather than "factory
                default configuration", so as accommodate white-box scenarios.</t>
                <t>added a paragraph to Intro regarding how the solution primarily regards
                physical machines, but could be extended to VMs by a future document.</t>
                <t>added a pointer to the Workflow Overview section (recently moved to
                the Appendix) to the Intro.</t>
                <t>added a note that, in order to simplify the verification process,
                the "Zerotouch Information" PKCS #7 structure MUST also contain the
                signing X.509 certificate.</t>
                <t>noted that the owner certificate's must either have no Key Usage or
                the Key Usage must set the "digitalSignature" bit.</t>
                <t>noted that the owner certificate's subject and subjectAltName values
                are not constrained.</t>
                <t>moved/consolidated some text from the Artifacts section down to the
                Device Details section.</t>
                <t>tightened up some ambiguous language, for instance, by referring to
                specific leaf names in the Voucher artifact.</t>
                <t>reverted a previously overzealous s/unique-id/serial-number/ change.</t>
                <t>modified language for when ZTP runs from when factory-default config
                is running to when ZTP is configured, which the factory-defaults should set .</t>
              </list>
            </t>
          </section>
          <section title="16 to 17">
            <t>
              <list style="symbols">
                <t>Added an example for how to promote an untrusted connection to a
                trusted connection.</t>
                <t>Added a "query parameters" section defining some parameters enabling
                scenarios raised in last call.</t>
                <t>Added a "Disclosing Information to Untrusted Servers" section to
                the Security Considerations.</t>
              </list>
            </t>
          </section>
          <section title="17 to 18">
            <t>
              <list style="symbols">
                <t>Added Security Considerations for each YANG module.</t>
                <t>Reverted back to the device always sending its DevID cert.</t>
                <t>Moved data tree to ac'get-bootstrapping-data' RPC.</t>
                <t>Moved the 'update-progress' action to a 'report-progress' RPC.</t>
                <t>Added an 'untrusted-connection' parameter to 'get-bootstrapping-data' RPC.</t>
                <t>Added the "ietf-zerotouch-device" module.</t>
                <t>Lots of small updates.</t>
              </list>
            </t>
          </section>
          <section title="18 to 19">
            <t>
              <list style="symbols">
                <t>Fixed 'must' expressions, by converting 'choice' to a 'list' of
                'image-verification', each of which now points to a base identity
                called "hash-algorithm".  There's just one algorithm currently
                defined (sha-256).  Wish there was a standard crypto module that
                could identify such identities.</t>
              </list>
            </t>
          </section>
          <section title="19 to 20">
            <t>
              <list style="symbols">
                <t>Now references I-D.ietf-netmod-yang-tree-diagrams.</t>
                <t>Fixed tree-diagrams in Section 2 to always reflect
                current YANG (now they are now dynamically generated).</t>
                <t>The "redirect-information" container's "trust-anchor"
                is now a cms that can contain a chain of certificates,
                rather than a single certificate.</t>
                <t>The "onboarding-information" container's support
                for image verification reworked to be extensible.</t>
                <t>Added a reference to the "Device Details" section to
                the new ietf-zerotouch-device module.</t>
                <t>Clarified that the device must always pass it's IDevID
                certificate, even for untrusted bootstrap servers.</t>
                <t>Fixed the description statement for the "script" typedef
                to refer to the [pre/post]-script-[warning/error] enums,
                rather than the legacy script-[warning/error] enums.</t>
                <t>For the get-bootstrapping-data RPC's input, removed
                the "remote-id" and "circuit-id" fields, and added a
                "hw-model" field.</t>
                <t>Improved DHCP error handling text.</t>
                <t>Added MUST requirement for DHCPv6 client and server
                implementing <xref target="RFC3396"/> to handle URI lists
                longer than 255 octets.</t>
                <t>Moved everything from PKCS#7 to CMS (this shows up
                as a big change).</t>
              </list>
            </t>
        </section>
      </section>
    </back>
</rfc>
